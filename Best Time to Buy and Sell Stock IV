class Solution 
{
    public int maxProfit(int k, int[] prices) 
    {
        if(prices == null || prices.length == 0)
            return 0;
        
        if(k > prices.length)
        {
            int result = 0;
            for(int i = 1; i < prices.length; i++)
            {
                if(prices[i] - prices[i - 1] > 0)
                    result = result + prices[i] - prices[i - 1];
            }
            return result;
        }
        
        int[] evenProfit = new int[prices.length];
        int[] oddProfit = new int[prices.length];
        
        for(int i = 1; i <= k; i++)
        {
            int maxTillNow = Integer.MIN_VALUE;
            int[] currentProfit;
            int[] previousProfit;
            
            if(i % 2 == 1)
            {
                currentProfit = oddProfit;
                previousProfit = evenProfit;
            }
            else
            {
                currentProfit = evenProfit;
                previousProfit = oddProfit;
            }
            
            for(int j = 1; j < prices.length; j++)
            {
                maxTillNow = Math.max(maxTillNow, previousProfit[j - 1] - prices[j - 1]);
                currentProfit[j] = Math.max(currentProfit[j - 1], maxTillNow + prices[j]);
            }
        }
        
        return k % 2 == 0 ? evenProfit[prices.length - 1] : oddProfit[prices.length - 1];    
    }
}
