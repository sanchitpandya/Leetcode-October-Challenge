/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution 
{
    public Node cloneGraph(Node node) 
    {
        if(node == null)
            return null;
        Map<Node , Node> map = new HashMap<>();
        Queue<Node> queue = new LinkedList<>();
        queue.offer(node);
        map.put(node , new Node(node.val));
        
        while(!queue.isEmpty())
        {
            Node currNode = queue.poll();
            
            for(Node nei : currNode.neighbors)
            {
                if(!map.containsKey(nei))
                {
                    map.put(nei , new Node(nei.val));
                    queue.offer(nei);
                }
                map.get(currNode).neighbors.add(map.get(nei));  
            }
        }
        return map.get(node);
    }
}
